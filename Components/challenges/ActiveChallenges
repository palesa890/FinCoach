import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Target, Trophy, Clock, DollarSign } from "lucide-react";
import { differenceInDays } from "date-fns";

export default function ActiveChallenges({ challenges, onSelect }) {
  return (
    <Card className="glass-effect shadow-lg border-0 mb-8">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Target className="w-5 h-5 text-amber-500" />
          Your Active Challenges
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {challenges.map((challenge) => {
            const daysLeft = challenge.end_date 
              ? differenceInDays(new Date(challenge.end_date), new Date())
              : null;

            const currentAmount = challenge.current_amount || 0;
            const targetAmount = challenge.target_amount || 0;
            const progress = targetAmount > 0 ? Math.min((currentAmount / targetAmount) * 100, 100) : 0;

            return (
              <div 
                key={challenge.id} 
                className="p-4 bg-gradient-to-br from-amber-50 to-orange-50 rounded-lg border border-amber-200 cursor-pointer hover:shadow-md transition-all"
                onClick={() => onSelect(challenge)}
              >
                <div className="flex justify-between items-start mb-3">
                  <h4 className="font-semibold text-slate-800">{challenge.title}</h4>
                  <Badge variant="outline" className="bg-white">
                    {challenge.difficulty}
                  </Badge>
                </div>

                <div className="mb-3">
                  <div className="flex justify-between items-center mb-1 text-xs text-slate-600">
                    <span>R{currentAmount.toLocaleString()}</span>
                    <span>R{targetAmount.toLocaleString()}</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
                
                <p className="text-sm text-slate-600 mb-3">
                  {progress.toFixed(1)}% complete
                </p>

                <div className="flex items-center justify-between text-xs">
                  {daysLeft !== null && (
                    <div className="flex items-center gap-1 text-slate-600">
                      <Clock className="w-3 h-3" />
                      <span>{daysLeft} days left</span>
                    </div>
                  )}
                  <div className="flex items-center gap-1 text-amber-600">
                    <Trophy className="w-3 h-3" />
                    <span>{challenge.points_reward} pts</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}